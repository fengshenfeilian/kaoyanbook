

用户信息表{
    用户名 | 密码 | 身份类型 | 身份证号 | 邮箱号 | 手机号 | 用户类型 | 账户余额
}



订单表(relation){
    用户名 | 车票编号 | 订单生成时间
}

车次表{
    车次号 | 途经站0 | ... | 途经站5
}

列车表{
    列车号 | 
}

运营表{
    车次号 | 时间
}

订票表{
    车票编号 | 车次号 | 车厢号 | 座位号 | 余票标识码 | 余票数量 | 发车日期
}

价目表{
    里程 | 普快 | 特快 | 高铁 | 普快_卧 | 特快_卧 | 高铁_卧 
}


----------------------------------------view---------------------------------------
车票信息表(view){
    车票编号 | 车次号 | 车厢号 | 座位号 | 购票人身份证号 | 出发地 | 目的地 | 出发时间 | 价格
}

------------------------------------------算法-------------------------------------

现给定乘车区间[a,b]
####################################  1.获得可选车次 ####################################
方案1:
    后端维护数据结构Graph[n][n][m],
            dis = G[a][b][mi] 表示车次为mi,从a到b的距离
    得到Serial[a,b]={s0,s1...si},表示同时途经a,b的车次

###################################  2.得到可订车次信息表(前端) ################################
车次 | 始发站 | 终点站 | 出发时间 | 到达时间 | 卧铺 | 硬座 | 无座 | 预订






























